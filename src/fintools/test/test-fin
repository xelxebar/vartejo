#!/usr/bin/env bash
shopt -s -o errexit nounset pipefail
readonly testdir="$(dirname "${0}")"

# shellcheck source=fin
. "${testdir}/../fin"


## Test Function 'apikey'
#

test__apikey__good_key()
{
	local apikey

	apikey="$(apikey 'alphavantage.co')"
	[[ "${apikey}" != "" ]]
}

test__apikey__bad_key()
{
	local apikey

	! apikey="$(apikey '__NONEXISTENT_KEY__' 2>/dev/null)"
	[[ "${apikey}" == "" ]]
}

test__apikey__null_key()
{
	! apikey 2>/dev/null
}


## Test Function 'ifstdin'
#

test__ifstdin__stdin_nonempty()
{
	local input="some input"

	printf '%s' "${input}" \
	| ifstdin cat \
	| [[ "$(cat)" == "${input}" ]]
}

test__ifstdin__stdin_empty()
{
	printf '' \
	| ifstdin false \
	| [[ -z "$(cat)" ]]
}


## Test Function 'mkrhash'
#

test__mkrhash__good_args()
{
	local -A hashmap=()
	local -a array=( 'foo' 'bar' 'baz')

	local i
	mkrhash hashmap array
	[[ ${#hashmap[@]} -eq ${#array[@]} ]]
	for i in "${!array[@]}"; do
		[[ "${hashmap["${array[i]}"]}" == "${i}" ]]
	done
}

test__mkrhash__empty_array()
{
	local -A hashmap=()
	# shellcheck disable=SC2034
	local -a empty_array=()

	mkrhash hashmap empty_array
	[[ ${#hashmap[@]} -eq 0 ]]
}

test__mkrhash__missing_array()
{
	local -A hashmap=()

	mkrhash hashmap missing_array
	[[ ${#hashmap[@]} -eq 0 ]]
}

test__mkrhash__missing_hashmap()
{
	local -a array=( 'foo' 'bar' 'baz')

	! mkrhash missing_hashmap array
}


## Test Function 'sortcols'
#

test__sortcols__column_ordering()
{
	# shellcheck disable=SC2034
	local -a colnames=( 'foo' 'bar' 'baz' )
	# shellcheck disable=SC2034
	local -A columns=(
		[baz]=0
		[foo]=1
		[bar]=2
	)
	local column_separator=','
	local text

	text="$(cat <<- EOF
		baz001,foo001,bar001
		baz002,foo002,bar002
		baz003,foo003,bar003
	EOF
	)"
	echo "${text}" \
	| sortcols columns colnames "${column_separator}" \
	| [[ "$(head -1)" == "foo001,bar001,baz001" ]]
}

test__sortcols__column_insertion()
{
	# shellcheck disable=SC2034
	local -a colnames=( 'foo' 'bar' 'baz' )
	# shellcheck disable=SC2034
	local -A columns=(
		[baz]=0
		[foo]=1
	)
	local column_separator=','
	local text

	text="$(cat <<- EOF
		baz001,foo001
		baz002,foo002
		baz003,foo003
	EOF
	)"
	echo "${text}" \
	| sortcols columns colnames "${column_separator}" \
	| [[ "$(head -1)" == "foo001,,baz001" ]]
}

test__sortcols__column_deletion()
{
	# shellcheck disable=SC2034
	local -a colnames=( 'foo' 'baz' )
	# shellcheck disable=SC2034
	local -A columns=(
		[baz]=0
		[foo]=1
		[bar]=2
	)
	local column_separator=','
	local text

	text="$(cat <<- EOF
		baz001,foo001,bar001
		baz002,foo002,bar002
		baz003,foo003,bar003
	EOF
	)"
	echo "${text}" \
	| sortcols columns colnames "${column_separator}" \
	| [[ "$(head -1)" == "foo001,baz001" ]]
}

test__sortcols__empty_sort()
{
	# shellcheck disable=SC2034
	local -a colnames=()
	# shellcheck disable=SC2034
	local -A columns=(
		[baz]=0
		[foo]=1
	)
	local column_separator=','
	local text

	text="$(cat <<- EOF
		foo001,baz001
		foo002,baz002
		foo003,baz003
	EOF
	)"
	echo "${text}" \
	| sortcols columns colnames "${column_separator}" \
	| [[ -z "$(cat)" ]]
}

test__sortcols__empty_data()
{
	# shellcheck disable=SC2034
	local -a colnames=( 'foo' 'bar' 'baz' )
	# shellcheck disable=SC2034
	local -A columns=(
		[baz]=0
		[foo]=1
	)
	local sep=','

	printf '' \
	| sortcols columns colnames "${sep}" \
	| [[ -z "$(cat)" ]]
}


## Test Function 'isdeclared'
#

test__isdeclared()
{
	# shellcheck disable=SC2034
	local variable

	isdeclared variable
	! isdeclared missing_variable
}


## Test Function 'fetch_raw_time_series_alphavantage_co'
#

test__fetch_raw_time_series_alphavantage_co__bad_args()
{
	local apikey='dummy'
	local symbol=LF

	! fetch_raw_time_series_alphavantage_co
	! fetch_raw_time_series_alphavantage_co "${apikey}"
	! fetch_raw_time_series_alphavantage_co '' "${symbol}"
	! fetch_raw_time_series_alphavantage_co '' ''
	! fetch_raw_time_series_alphavantage_co "${apikey}" "${symbol}" \
	                                        __missing_function__
	! fetch_raw_time_series_alphavantage_co "${apikey}" "${symbol}" \
	                                        default \
	                                        __missing_outputsize__
	! fetch_raw_time_series_alphavantage_co "${apikey}" "${symbol}" \
	                                        default default \
	                                        __missing_interval__
	! fetch_raw_time_series_alphavantage_co "${apikey}" "${symbol}" \
	                                        default default default \
	                                        __missing_datatype__
}


## Test Function 'fetch_raw_securities_nasdaq_com'
#

test__fetch_raw_securities_nasdaq_com__bad_args()
{
	! fetch_raw_securities_nasdaq_com __missing_symbol__
}


## Test Function 'postfetch_time_series_alphavantage_co'
#

test__postfetch_time_series_alphavantage_co__correct_output_format()
{
	local data="${testdir}/res/raw/LF-daily-100-alphavantage.co.csv"
	local sep="${setting[csv-separator]}"

	postfetch_time_series_alphavantage_co <"${data}" \
	| [[ "$(colcount "${sep}")" -eq "${#columns_time_series[@]}" ]]
}

test__postfetch_time_series_alphavantage_co__empty_input()
{
	printf '' \
	| postfetch_time_series_alphavantage_co \
	| [[ -z "$(cat)" ]]
}

test__postfetch_time_series_alphavantage_co__upstream_error()
{
	local data="${testdir}/res/raw/error-alphavantage.co.json"

	! postfetch_time_series_alphavantage_co <"${data}" 2>/dev/null
}


## Test Function 'postfetch_securities_nasdaq_com'

test__postfetch_securities_nasdaq_com__correct_output_format()
{
	local data="${testdir}/res/raw/NYSE-nasdaq.com.csv"
	local sep="${setting[csv-separator]}"

	postfetch_securities_nasdaq_com <"${data}" \
	| [[ "$(colcount "${sep}")" -eq "${#columns_securities_list[@]}" ]]
}

test__postfetch_securities_nasdaq_com__empty_input()
{
	printf '' \
	| postfetch_securities_nasdaq_com \
	| [[ -z "$(cat)" ]]
}


## Test Function 'fetch_time_series_alphavantage_co'
#

test__fetch_time_series_alphavantage_co__bad_args()
{
	local symbol="DUMMY"

	! fetch_time_series_alphavantage_co
	! fetch_time_series_alphavantage_co "${symbol}" \
	                                    __missing_function__
	! fetch_time_series_alphavantage_co "${symbol}" default \
	                                    __missing_outputsize__
	! fetch_time_series_alphavantage_co "${symbol}" default default \
	                                    __missing_interval__
}


## Test Function 'fetch_securities_nasdaq_com'
#

test__fetch_securities_nasdaq_com__bad_args()
{
	! fetch_securities_nasdaq_com __missing_symbol__
}


## Test Function 'fetch_time_series'

test__fetch_time_series__bad_args()
{
	local symbol='LF'

	! fetch_time_series __missing_symbol__  2>/dev/null
	! fetch_time_series "${symbol}" __missing_function__
	! fetch_time_series "${symbol}" default __missing_outputsize__
	! fetch_time_series "${symbol}" default default \
	                                __missing_interval__
}

## Test Function 'fetch_securities'
#

test__fetch_securities__bad_args()
{
	local symbol='NYSE'

	! fetch_securities __missing_symbol__
}


## Test Function 'munge_filter_columns'
#

test__munge_filter_columns__column_count()
{
	local data="${testdir}/res/time-series/LF-daily-100.csv"
	local sep="${setting[csv-separator]}"
	local -a cols=(0 1 2)
	
	munge_filter_columns "${cols[@]}" <"${data}" \
	| [[ "$(colcount "${sep}")" -eq ${#cols[@]} ]]
}

test__munge_filter_columns__empty_input()
{
	local sep="${setting[csv-separator]}"
	local -a cols=(0 1 2)
	
	printf '' \
	| munge_filter_columns "${cols[@]}" \
	| [[ -z "$(cat)" ]]
}

test__munge_filter_columns__empty_filter()
{
	local data="${testdir}/res/time-series/LF-daily-100.csv"
	local -a cols=()

	munge_filter_columns <"${data}" \
	| [[ -z "$(cat)" ]]
	
	munge_filter_columns "${cols[@]}" <"${data}" \
	| [[ -z "$(cat)" ]]
}


## Test Function 'munge_metadata_header'
#

test__munge_metadata_header__correct_output_format()
{
	local data="${testdir}/res/time-series/LF-daily-100.csv"
	local header="${testdir}/res/header/LF-daily-100-maximal.csv"
	local -a hcols=(
		"${_ts[id]}"
		"${_ts[open]}"
		"${_ts[high]}"
		"${_ts[low]}"
		"${_ts[close]}"
		"${_ts[volume]}"
	)

	munge_metadata_header "${hcols[@]}" <"${data}" \
	| head --lines=$(( ${#hcols[@]} + 1 )) \
	| [[ "$(cat)" == "$(cat "${header}")" ]] \
	|| [[ $? -eq ${ERRPIPE} ]]
}

test__munge_metadata_header__empty_header_column_list()
{
	local data="${testdir}/res/time-series/LF-daily-100.csv"
	local header="${testdir}/res/header/LF-daily-100-minimal.csv"
	local -a hcols=()

	munge_metadata_header "${hcols[@]}" <"${data}" \
	| head --lines=$(( ${#hcols[@]} + 1 )) \
	| [[ "$(cat)" == "$(cat "${header}")" ]] \
	|| [[ $? -eq ${ERRPIPE} ]]

	munge_metadata_header <"${data}" \
	| head --lines=$(( ${#hcols[@]} + 1 )) \
	| [[ "$(cat)" == "$(cat "${header}")" ]] \
	|| [[ $? -eq ${ERRPIPE} ]]
}


## Test Function 'munge_multi_ema'
#

test__munge_multi_ema__correct_output()
{
	local ts_data="${testdir}/res/time-series/LF-daily-100.csv"
	local ema_data="${testdir}/res/multi-ema/LF-daily-100-0.8.csv"
	local idcol="${_ts[id]}"
	local datacol="${_ts[close]}"
	local w="${setting[ema-weight]}"

	munge_multi_ema "${idcol}" "${datacol}" "${w}" <"${ts_data}" \
	| [[ "$(cat)" == "$(cat "${ema_data}")" ]]
}

test__munge_multi_ema__bad_id_column()
{
	local ts_data="${testdir}/res/time-series/LF-daily-100.csv"
	local idcol=-1
	local datacol="${_ts[close]}"
	local w="${setting[ema-weight]}"

	! munge_multi_ema "${idcol}" "${datacol}" "${w}" <"${ts_data}"
	! munge_multi_ema "" "${datacol}" "${w}" <"${ts_data}"
}

test__munge_multi_ema__bad_data_column()
{
	local ts_data="${testdir}/res/time-series/LF-daily-100.csv"
	local idcol="${_ts[id]}"
	local datacol=-1
	local w="${setting[ema-weight]}"

	! munge_multi_ema "${idcol}" "${datacol}" "${w}" <"${ts_data}"
	! munge_multi_ema "${idcol}" "" "${w}" <"${ts_data}"
}

test__munge_multi_ema__bad_weight()
{
	local ts_data="${testdir}/res/time-series/LF-daily-100.csv"
	local idcol="${_ts[id]}"
	local datacol="${_ts[close]}"

	! munge_multi_ema "${idcol}" "${datacol}" -100 <"${ts_data}"
	! munge_multi_ema "${idcol}" "${datacol}" 100 <"${ts_data}"
}

test__munge_multi_ema__empty_input()
{
	local ts_data="${testdir}/res/time-series/LF-daily-100.csv"
	local idcol="${_ts[id]}"
	local datacol="${_ts[close]}"
	local w="${setting[ema-weight]}"

	printf '' \
	| munge_multi_ema "${idcol}" "${datacol}" "${w}" \
	| [[ -z "$(cat)" ]]
}

test__munge_multi_ema__missing_args()
{
	local idcol="${_ts[id]}"

	! munge_multi_ema
	! munge_multi_ema "${idcol}"
}


## Test Plots
#

test__plot_candlestick()
{
	local data="${testdir}/res/plot-data/time-series-LF-daily-100.dat"

	plot_candlestick "${_ts[id]}" \
	                 "${_ts[open]}" \
	                 "${_ts[low]}" \
	                 "${_ts[high]}" \
	                 "${_ts[close]}" \
	                 <"${data}"
}

test__plot_linespoints()
{
	local data="${testdir}/res/plot-data/ema-0.8-LF-daily-100.dat"

	plot_linespoints "${_me[id]}" \
	                 "${_me[ema]}" \
	                 <"${data}"
}

test__plot_dgrid3d()
{
	local data="${testdir}/res/multi-ema/LF-daily-100-0.0~1.0-101.csv"

	plot_dgrid3d "${_me[id]}" \
	             "${_me[weight]}" \
	             "${_me[ema]}" \
	             <"${data}"
}


## Unit Test Framework
#

if [[ "${BASH_SOURCE[0]}" = "${0}" ]]; then
	#shellcheck source=test/utest
	. "${testdir}/utest"
	utest_run "${@}"
fi
