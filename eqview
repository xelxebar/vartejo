#!/usr/bin/env bash
set -euo pipefail


readonly -A setting=(
	[plot-vert-padding]=0.1
	[plot-candlestick-neg-color]='red'
	[plot-candlestick-pos-color]='green'
	[ema-weight]=0.8
)

readonly -A tsvcol=(
	[id]=1
	[date]=2
	[open]=3
	[high]=4
	[low]=5
	[close]=6
	[volume]=7
	[ema]=3
)

readonly -A error=(
	[bad-args]=101
	[bad-cmd]=102
)


fetch_tsv_time_series()
{
	fetch_tsv_time_series_alphavantage_co "${@}"
}

## Fetch JSON data from alphavantage.co
#
# @param <1>  API key
# @param <2>  Stock symbol
# @param [3]  Function
# @param [4]  Output size
# @param [5]  Interval
# @param [6]  Datatype
# @stdout     JSON result
fetch_time_series_alphavantage_co()
{
	[[ ${#} -lt 2 ]] && return "${error[bad-args]}"
	[[ -z "${1}" ]] && return "${error[bad-args]}"
	[[ -z "${2}" ]] && return "${error[bad-args]}"

	local url='https://www.alphavantage.co'
	local path="query"
	local query=""

	local -A function=(
		[intraday]='TIME_SERIES_INTRADAY'
		[daily]='TIME_SERIES_DAILY'
		[daily-adjusted]='TIME_SERIES_DAILY_ADJUSTED'
		[weekly]='TIME_SERIES_WEEKLY'
		[monthly]='TIME_SERIES_MONTHLY'
		[default]="${function[daily]}"
	)
	local -A outputsize=(
		[compact]='compact'
		[full]='full'
		[default]="${outputsize[compact]}"
	)
	local -A interval=(
		[1min]='1min'
		[5min]='5min'
		[15min]='15min'
		[30min]='30min'
		[60min]='60min'
		[default]="${interval[60min]}"
	)
	local -A datatype=(
		[json]='json'
		[csv]='csv'
		[default]="${datatype[json]}"
	)

	local -A field=(
	        [apikey]="${1}"
		[symbol]="${2}"
	        [function]="${function[${3-default}]}"
	        [outputsize]="${outputsize[${4-default}]}"
	        [interval]="${interval[${5-default}]}"
	        [datatype]="${datatype[${6-default}]}"
	)

	for f in "${!field[@]}"; do
		query+="&${f}=${field[${f}]}"
	done
	query="${query#&}"

	echo "${field[apikey]}"     \
	     "${field[symbol]}"     \
	     "${field[function]}"   \
	     "${field[outputsize]}" \
	     "${field[interval]}"   \
	     "${field[datatype]}"
	curl --silent "${url}/${path}?${query}"
}

json2tsv_alphavantage_co_time_series()
{
	local apikey symbol function outputsize interval datatype
	IFS=' ' read -r apikey symbol function outputsize interval datatype

	local -A series_key=(
		[TIME_SERIES_INTRADAY]="Time Series (${interval})"
		[TIME_SERIES_DAILY]="Time Series (Daily)"
		[TIME_SERIES_DAILY_ADJUSTED]="Time Series (Daily)"
		[TIME_SERIES_WEEKLY]="Weekly Time Series"
		[TIME_SERIES_MONTHLY]="Monthly Time Series"
	)

	local -A price_key=(
		[open]="1. open"
		[high]="2. high"
		[low]="3. low"
		[close]="4. close"
		[volume]="5. volume"
	)

	jq -r '."'"${series_key[${function}]}"'"
	       | to_entries[]
	       | [ .key
	         , .value."'"${price_key[open]}"'"
	         , .value."'"${price_key[high]}"'"
	         , .value."'"${price_key[low]}"'"
	         , .value."'"${price_key[close]}"'"
	         , .value."'"${price_key[volume]}"'" ]
	       | @tsv' \
	| tac \
	| nl --number-width=1
}

fetch_tsv_time_series_alphavantage_co()
{
	local apikey
	local symbol="${1}"
	local function="${2-default}"
	local outputsize="${3-default}"
	local interval="${4-default}"
	apikey="$(apikey alphavantage.co)"

	fetch_time_series_alphavantage_co "${apikey}" \
	                                  "${symbol}" \
	                                  "${function}" \
	                                  "${outputsize}" \
	                                  "${interval}" \
	                                  json \
	| json2tsv_alphavantage_co_time_series
}

## Prepend metadata header to TSV data
#
# @param <1>  Column that contains data minimum
# @param <2>  Column that contains data maximum 
munge_tsv_prepend_header()
{
	local mincol="${1}"
	local maxcol="${2}"
	local low high range count
	local dat=""

	low=$(getconf INT_MAX)
	high=$(getconf INT_MIN)

	while IFS= read -r l; do
		local llow
		local lhigh

		llow=$(echo "${l}"  | cut -d$'\t' -f"${mincol}")
		lhigh=$(echo "${l}" | cut -d$'\t' -f"${maxcol}")

		if [[ $(bc <<<"${llow} < ${low}") -eq 1 ]]; then
			low=${llow}
		fi
		if [[ $(bc <<<"${lhigh} > ${high}") -eq 1 ]]; then
			high=${lhigh}
		fi

		dat="$(echo -e "${dat}\n${l}")"
	done

	range=$(bc <<<"${high} - ${low}")
	count=$(tail -1 <<<"${dat}" | cut -d$'\t' -f1)

	echo "${high}" "${low}" "${range}" "${count}"
	echo "${dat}"
}

## Flatten price data into single EMA summary column
#
# @param <1>  Exponential weight
munge_tsv_ema()
{
	local weight="${1}"

	if [[ $(bc <<<"${weight} <  0") -eq 1 ]] \
	|| [[ $(bc <<<"${weight} >  1") -eq 1 ]]; then
		return "${error[bad-arg]}"
	fi

	local id date open high low sum volume
	IFS=$'\t' read -r id date open high low sum volume
	echo -e "${id}\t${date}\t${sum}"

	local meas=1
	while IFS=$'\t' read -r id date open high low close volume; do
		local ema

		meas=$(bc <<<"${meas}*${weight} + 1")
		sum=$(bc <<<"(${sum}*${weight} + ${close})")
		ema=$(bc <<<"${sum}/${meas}")

		echo -e "${id}\t${date}\t${ema}"
	done
}


## Colorized candlestick plot in X11
#
# @param [1]  Color for losses
# @param [2]  Color for gains
plot_candlestick()
{
	local negcolor="${1-red}"
	local poscolor="${2-green}"
	local negval=-1
	local posval=1
	local pad="${setting[plot-vert-padding]}"
	local high low range count
	local xmin xmax ymin ymax
	IFS=" " read -r high low range count
	IFS= read -r

	xmin=0
	xmax=$(( count + 1 ))
	ymin=$(bc <<<"${low}  - ${range} * ${pad}")
	ymax=$(bc <<<"${high} + ${range} * ${pad}")

	gnuplot --persist -e "
		set datafile separator '\t';

		set xrange [${xmin}:${xmax}];
		set yrange [${ymin}:${ymax}];

		set palette defined ( ${negval} '${negcolor}'
		                    , ${posval} '${poscolor}' );
		set cbrange [${negval}:${posval}];
		unset colorbox;
		set style fill solid noborder;

		plot '<cat' using ${tsvcol[id]}
		                  :${tsvcol[open]}
		                  :${tsvcol[low]}
		                  :${tsvcol[high]}
		                  :${tsvcol[close]}
		                  :(\$${tsvcol[close]} < \$${tsvcol[open]}
		                    ? ${negval}
		                    : ${posval})
		            with candlesticks
		            palette
		            notitle;
	"
}

## ASCII line plot
#
# Draw an ASCII line plot. Defaults to closing prices from standard TSV
#
# @param [1]  Plot x-axis column
# @param [2]  Plot y-axis column
plot_linespoints()
{
	local xcol=${1-${tsvcol[id]}}
	local ycol=${2-${tsvcol[close]}}
	local pad="${setting[plot-vert-padding]}"
	local high low range count
	local xmin xmax ymin ymax
	IFS=" " read -r high low range count
	IFS= read -r

	xmin=0
	xmax=$(( count + 1 ))
	ymin=$(bc <<<"${low}  - ${range} * ${pad}")
	ymax=$(bc <<<"${high} + ${range} * ${pad}")

	gnuplot --persist -e "
		set datafile separator '\t';

		set xrange [${xmin}:${xmax}];
		set yrange [${ymin}:${ymax}];

		plot '<cat' using ${xcol} : ${ycol}
		            with linespoints
		            notitle;
	"
}

apikey()
{
	local key="${1}"
	local -A uid=(
		[alphavantage.co]="co/alphavantage/x@wilsonb.com/api-key"
	)

	pass show "${uid[${key}]}"
}


cmd_candle()
{
	fetch_tsv_time_series "${@}" \
	| munge_tsv_prepend_header "${tsvcol[low]}" "${tsvcol[high]}" \
	| plot_candlestick "${setting[plot-candlestick-neg-color]}" \
	                     "${setting[plot-candlestick-pos-color]}" 
}

cmd_ema()
{
	fetch_tsv_time_series "${@}" \
	| munge_tsv_ema "${setting[ema-weight]}" \
	| munge_tsv_prepend_header "${tsvcol[ema]}" "${tsvcol[ema]}" \
	| plot_linespoints "${tsvcol[id]}" "${tsvcol[ema]}"

}

usage()
{
	cat <<- EOF
	Usage: ${0} <security symbol>
	EOF
}


main()
{
	if [[ ${#} -eq 0 ]]; then
		usage
		return "${error[bad-cmd]}"
	fi

	readonly cmd="${1}"
	shift

	case "${cmd}" in
		candle) cmd_candle "${@}";;
		ema)    cmd_ema "${@}";;
		*) usage;;
	esac
}

if [[ "${BASH_SOURCE[0]}" = "${0}" ]]; then
	main "${@}"
fi
